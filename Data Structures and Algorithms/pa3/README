This program was written to run Depth First searches on graphs constructed with Graph ADTs. These Graph ADTs utilize an array of Linked List
 ADTs to store adjacent vertices. Each of these Linked Lists can be accessed using Graph->array[i]. This also applies to the other arrays used 
 to store colors, discover, parents, and finish. Color is used for the DFS algorithm, and discover calculates a variable 'time' from each vertex 
 in the graph. "Time" is calculated from when a vertex is discovered and stored in the array, and also stored from when we "finish" a vertex as 
 in G->finish[i]. Furthermore, we run Depth First searches to find trees and "strongly connected components" with the "roots" of the tree. We 
 can do this by running DFS on the transpose of a graph. This program should be run with an input file and an output file given in that order 
 to the command ./FindComponents after running the make file. Furthermore, a GraphTest.c file can be ran using 'Make GraphTest' and executed 
 with ./GraphTest. This will not run the main FindComponents file but rather test the Graph ADT using all of its functions. Graph will also 
 include a List.h and List.c file to reference the List ADTs. Graph.h stores all of the functions defined in Graph.c, the main part of the 
 Graph ADT with all of its functions. 
